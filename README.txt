Cars-Site (Laravel 12 Auto Marketplace)

Краткое описание: Cars-Site – это профессиональный веб-портал для продажи автомобилей, разработанный на Laravel 12. Система предоставляет полный цикл управления контентом с гибкой системой ролей, разграничением прав доступа и комплексной безопасностью. Пользователи могут просматривать автомобили, оставлять комментарии, а администраторы – управлять контентом, моделями, странами и тегами.

Добавленные файлы (помимо стандартного Laravel 12):

1. База данных (laravel.sql), кодировка: utf8mb4_unicode_ci.
Система ролей (один пользователь - несколько ролей):
- Неавторизованный пользователь: Просмотр машин со статусом "Активно", марок, стран и тегов. Статусы карточек скрыты.
- Покупатель: Просмотр машин ("Активно"), марок, стран и тегов. Добавление комментариев к машинам и брендам. Статусы карточек скрыты.
- Менеджер: Просмотр всех машин (видит статусы). Добавление комментариев. Создание и редактирование своих карточек. Изменение статусов, перемещение в корзину и восстановление. Просмотр марок, стран и тегов.
- Модератор: Полный доступ: просмотр, добавление, редактирование и удаление любых машин, марок, стран и тегов. Управление комментариями, корзиной и статусами.

2. Основные компоненты 
2.1 Структура проекта: public/ – корневая папка; public/index.php – точка входа, public/favicon/ – иконки сайта.

2.2 app/Enums/Cars/Status.php – статусы машин: 0 – Черновик | 5 – Активно | 10 – Продано | 15 – Отменено.

2.3 Контроллеры (app/Http/Controllers/):
- Auth/ – регистрация (Registration.php) и авторизация (Sessions.php).
- Основные: Brands.php, Cars.php, Comments.php, Countries.php, Tags.php.
- Абстрактный Controllers.php с проверкой заголовков.

2.4 Модели (app/Models/): Brand.php, Car.php, Comment.php, Country.php, Tag.php, User.php, Role.php.

2.5 Политики (app/Policies/): CarPolicy.php, CommentPolicy.php, GeneralPolicy.php (для брендов, стран, тегов).

2.6 Middleware (app/Http/Middleware/BlockByIp.php) – блокировка по IP.

2.7 Конфигурации (config/):
- app-cars.php – типы трансмиссии.
- commentable.php – комментируемые таблицы.
- list-blocked-ip.php – заблокированные IP.
- icons.php – настройки FontAwesome.

2.8 Дополнительные файлы:
- database/migrations/ – миграции БД.
- database/seeders/ – наполнители данных.
- lang/ru/ – локализация (русский язык).
- resources/views/ – Blade-шаблоны (компонентный подход).
- routes/web.php – маршруты сайта.

3. Развертывание на сервере:
3.1 создать корневую папку для домена \public. Файл \public\index.php - точка входа
3.2 скопировать все файлы на сервер кроме папок \vender и \node_modules. Установить папку \vender с помощью команды composer install, а папку \node_modules с помощью команды npm install, затем собрать проект с помощью команды npm run build (предварительно удалить файл \public\hot, если была выполнена команда npm run dev)
3.3 поменять настройки в файле .env, указать сервер в файле vite.config.js
3.4 выполнить команды php artisan config:cache и php artisan route:cache (при изменениях на сервере, необходимо повторно выполнять эти команды)

4. Особенности реализации:
4.1 Гибкая система ролей (множественные роли у пользователя).
4.2 Статусы карточек (Черновик, Активно, Продано, Отменено).
4.3 Комментарии к машинам и брендам (с проверкой прав).
4.4 Блокировка по IP через middleware.
4.5 Локализация (русский язык).
4.6 Компонентный Blade (переиспользуемые шаблоны).
4.7 FontAwesome иконки через провайдер.
4.8 Валидация форм (разделение по категориям).